{"version":3,"sources":["App.styles.ts","data/items.ts","data/categories.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","items","date","Date","category","title","value","categories","food","color","expense","rent","salary","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7c6002.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n\n`;\n\nexport const Header = styled.div`\n    background-color: darkblue;\n    height: 150px;\n    text-align: center;\n`;\n\nexport const HeaderText = styled.h1`\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n    padding-top: 30px;\n`;\n\nexport const Body = styled.div`\n    margin: auto;\n    max-width: 980px;\n    margin-bottom: 50px;\n`;","import { Item } from '../types/Item';\n\nexport const items: Item[] = [\n    {\n        date: new Date(2022, 2, 5),\n        category: 'food', \n        title: 'McDonalds', \n        value: 32.12\n    },   \n    {\n        date: new Date(2022, 3, 14),\n        category: 'food', \n        title: 'Burger King', \n        value: 38\n    },\n    {\n        date: new Date(2022, 2, 16),\n        category: 'rent', \n        title: 'Rent', \n        value: 2300\n    },\n    {\n        date: new Date(2022, 2, 15),\n        category: 'salary', \n        title: 'Salary', \n        value: 32.12\n    }\n];","import { Category } from \"../types/Category\"\n\nexport const categories: Category = {\n    food: { title: 'Food', color: 'blue', expense: true },\n    rent: { title: 'Rent', color: 'brown', expense: true },\n    salary: { title: 'Salary', color: 'green', expense: false },\n}","import { Item } from '../types/Item';\n\nexport const getCurrentMonth = (): string => {\n    const now = new Date();\n    return `${now.getFullYear()}-${now.getMonth() + 1}`;\n}\n\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\n    let newList: Item[] = [];\n    let [year, month] = date.split('-');\n\n    for( let i in list) {\n        if ( \n            list[i].date.getFullYear() === parseInt(year) && \n            list[i].date.getMonth() + 1 === parseInt(month) \n        ) {\n            newList.push(list[i]);\n        }\n    }\n\n    return newList\n}\n\nexport const formatDate = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n}\n\nconst addZeroToDate = (n: number): string => {\n    return n < 10 ? `0${n}` : `${n}`;\n}\n\nexport const formatCurrentMonth = (currentMonth: string): string => {\n    let [year, month] = currentMonth.split('-');\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return `${months[parseInt(month) - 1]} ${year}`;\n}","import styled from \"styled-components\";\n\nexport const Table = styled.table`\n    width: 100%;\n    background-color: #FFF;\n    padding: 20px;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    margin-top: 20px;\n`;\n\nexport const TableHeadColumn = styled.th<{ width?: number }>`\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\n    padding: 10px 0;\n    text-align: left;\n`;","import styled from \"styled-components\";\n\nexport const TableLine = styled.tr``;\n\nexport const TableColumn = styled.td`\n    padding: 10px 0;\n`;\n\nexport const Category = styled.div<{color: string}>`\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius: 5px;\n    color: #FFF;\n    background-color: ${props => props.color};\n`;\n\nexport const Value = styled.div<{color: string}>`\n    color: ${props => props.color};\n`;\n\n","import * as C from './styles'\nimport { Item } from '../../types/Item'\nimport { formatDate } from '../../helpers/dateFilter'\nimport { categories } from '../../data/categories'\n\ntype Props = {\n    item: Item\n}\n\nexport const TableItem = ({ item }: Props) => {\n    return (\n        <C.TableLine>\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\n            <C.TableColumn>\n                <C.Category color={categories[item.category].color}>\n                    {categories[item.category].title}\n                </C.Category>\n            </C.TableColumn>\n            <C.TableColumn>{item.title}</C.TableColumn>\n            <C.TableColumn>\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\n                    R$ {item.value}\n                </C.Value>\n            </C.TableColumn>\n        </C.TableLine>\n    );\n};\n","import * as C from './styles'\nimport { Item } from '../../types/Item'\nimport { TableItem } from '../TableItem'\n\ntype Props = {\n    list: Item[]\n}\n\nexport const TableArea = ({ list }: Props) => {\n    return (\n        <C.Table>\n            <thead>\n               <tr>\n                   <C.TableHeadColumn width={100}>Date</C.TableHeadColumn>\n                   <C.TableHeadColumn width={130}>Category</C.TableHeadColumn>\n                   <C.TableHeadColumn>Title</C.TableHeadColumn>\n                   <C.TableHeadColumn width={150}>Value</C.TableHeadColumn>\n                </tr> \n            </thead>\n            <tbody>\n                {list.map((item, index) => (\n                    <TableItem key={index} item={item} />\n                ))}\n            </tbody>\n        </C.Table>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: -40px;\n    display: flex;\n    align-items: center;\n`\n\nexport const MonthArea = styled.div`\n    flex: 1;\n    display: flex;\n    align-items: center;\n`\n\nexport const MonthArrow = styled.div`\n    width: 40px;\n    text-align: center;\n    font-size: 25px;\n    cursor: pointer;\n`\n\nexport const MonthTitle = styled.div`\n    flex: 1;\n    text-align: center;\n`\n\nexport const ResumeArea = styled.div`\n    flex: 2;\n    display: flex;\n`","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    flex: 1;\n`\n\nexport const Title = styled.div`\n    text-align: center;\n    font-weight: bold;\n    color: #888;\n    margin-bottom: 5px;\n`\n\nexport const Info = styled.div<{ color?: string}>`\n    text-align: center;\n    font-weight: bold;\n    color: ${props => props.color ?? '#000'};\n`   \n\n","import * as C from './styles';\n\ntype Props = {\n    title: string;\n    value: number;\n    color?: string;\n}\nexport const ResumeItem = ({ title, value, color}: Props) => {\n    return (\n        <C.Container>\n            <C.Title>{title}</C.Title>\n            <C.Info color={color}>R$ {value}</C.Info>\n        </C.Container>\n    );\n}","import * as C from './styles';\nimport { formatCurrentMonth } from '../../helpers/dateFilter';\nimport { ResumeItem } from '../ResumeItem';\n\ntype Props = {\n    currentMonth: string;\n    onMonthChange: (newMonth: string) => void;\n    income: number;\n    expense: number;\n}\n\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\n\n    const handlePrevMonth = () => {\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1);\n        currentDate.setMonth(currentDate.getMonth() - 1);\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n    }\n\n    const handleNextMonth = () => {\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1);\n        currentDate.setMonth(currentDate.getMonth() + 1);\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n    }\n\n    return(\n        <C.Container>\n            <C.MonthArea>\n                <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\n                <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n                <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\n            </C.MonthArea>\n\n            <C.ResumeArea>\n                <ResumeItem title='Income' value={income} />\n                <ResumeItem title='Expense' value={expense} />\n                <ResumeItem \n                    title='Balance' \n                    value={income - expense} \n                    color={(income - expense) < 0 ? 'red' : 'green'}\n                />\n            </C.ResumeArea>\n        </C.Container>\n    )\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n`;\nexport const InputLabel = styled.label`\n    flex: 1;\n    margin: 10px;\n`;\nexport const InputTitle = styled.div`\n    font-weight: bold;\n    margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Select = styled.select`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Button = styled.button`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    background-color: lightblue;\n    color: black;\n    cursor: pointer;\n\n    &:hover {\n        background-color: blue;\n        color: white;\n    }\n`;\n","import { useState } from 'react';\nimport * as C from './styles';\nimport { Item } from '../../types/Item';\n\nimport { categories } from '../../data/categories';\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState('');\n  const [categoryField, setCategoryField] = useState('');\n  const [titleField, setTitleField] = useState('');\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if(isNaN(new Date(dateField).getTime())) {\n      errors.push('Invalid Date!');\n    }\n    if(!categoryKeys.includes(categoryField)) {\n      errors.push('Invalid Category!');\n    }\n    if(titleField === '') {\n      errors.push('Empty Title!');\n    }\n    if(valueField <= 0) {\n      errors.push('Invalid Value!');\n    }\n\n    if(errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField\n      });\n      clearFields();\n    }\n  }\n\n  const clearFields = () => {\n    setDateField('');\n    setCategoryField('');\n    setTitleField('');\n    setValueField(0);\n  }\n\n  return (\n      <C.Container>\n        <C.InputLabel>\n          <C.InputTitle>Date</C.InputTitle>\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Category</C.InputTitle>\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\n            <>\n              <option></option>\n              {categoryKeys.map((key, index) => (\n                <option key={index} value={key}>{categories[key].title}</option>\n              ))}\n            </>\n          </C.Select>\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Title</C.InputTitle>\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Value</C.InputTitle>\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>&nbsp;</C.InputTitle>\n          <C.Button onClick={handleAddEvent}>Add</C.Button>\n        </C.InputLabel>\n      </C.Container>\n  );\n}","import { useState, useEffect } from 'react';\nimport * as C from \"./App.styles\";\nimport { Item } from './types/Item'\nimport { items } from \"./data/items\";\nimport { categories } from \"./data/categories\";\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter';\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\nconst App = () => {\n  const [list, setList] = useState(items)\n  const [filteredList, setFilteredList] = useState<Item[]>([])\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth())\n  const [income, setIncome] = useState(0)\n  const [expense, setExpense] = useState(0)\n\n  useEffect(() => {\n    setFilteredList(filterListByMonth(list, currentMonth))\n  }, [list, currentMonth])\n\n  useEffect(() => {\n    let incomeCount = 0;\n    let expenseCount = 0;\n\n    for (let i in filteredList) {\n      if (categories[filteredList[i].category].expense) {\n        expenseCount += filteredList[i].value;\n      } else {\n        incomeCount += filteredList[i].value;\n      }\n    }\n\n    setIncome(incomeCount)\n    setExpense(expenseCount)\n  }, [filteredList])\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth)\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Expense Tracker</C.HeaderText>\n      </C.Header>\n      <C.Body>\n        <InfoArea\n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n        <InputArea onAdd={handleAddItem} />\n        <TableArea list={filteredList} />\n      </C.Body>\n    </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}